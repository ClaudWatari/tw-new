{"version":3,"sources":["pages/home.js","pages/login.js","pages/feed.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","variant","src","alt","Component","Login","props","state","email","password","redirect","handleEmailChange","bind","handlePasswordChange","handleSubmit","event","this","setState","target","value","preventDefault","fetch","method","body","JSON","stringify","headers","credentials","then","response","json","console","log","status","window","location","catch","err","onSubmit","type","placeholder","name","onChange","Feed","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f105bac7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../css/home.css';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <Link to = {'./about'}>\r\n          <button variant = \"raised\" className = \"nav-link\">\r\n            About\r\n          </button>\r\n        </Link>&emsp;&emsp;\r\n        <Link to = {'./faq'}>\r\n          <button variant = \"raised\" className = \"nav-link\">\r\n            FAQ\r\n          </button>\r\n        </Link>\r\n        <Link to={'./login'}>\r\n          <button variant=\"raised\" className = \"login-link\">\r\n            Login\r\n          </button>\r\n        </Link>\r\n      </header>\r\n      <div className = 'container'>\r\n        <img src = '../images/andela-teamwork-01.jpg' alt = 'teamwork' className = 'home-img'/>\r\n        <p className = 'intro-p'><strong>Teamwork</strong> is an internal social network for employees of an organization.<br/>The goal of this application is to facilitate more interaction between colleagues and promote team bonding.<br/><br/>\r\n        Just log in to access your account and see all the latest articles and GIFs shared by your colleagues. Add your own posts so your colleagues can enjoy as well.<br/><br/><br/>\r\n        <span className = 'spanned-text'>We take employee interaction and team-building to the digital space.</span></p>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport '../css/login.css';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          email: '',\r\n          password: '',\r\n          redirect: false\r\n        };\r\n      this.handleEmailChange = this.handleEmailChange.bind(this);\r\n      this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleEmailChange (event) {\r\n        this.setState({email: event.target.value});\r\n    }\r\n\r\n    handlePasswordChange (event) {\r\n        this.setState({password: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n      fetch('http://localhost:4000/api/v1/auth/signin', {\r\n        method: \"POST\",\r\n        body : JSON.stringify({ email: this.state.email, password: this.state.password }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Accept\": \"application/json\"\r\n        },\r\n        credentials: 'include'\r\n      })\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          console.log('response:' ,response);\r\n          console.log(response.status);\r\n          \r\n          if(response.status === 'success') this.setState({redirect: true});\r\n\r\n          if(this.state.redirect) {\r\n            window.location = '/feed';\r\n            return  <Redirect  to ='/feed' /> // this method not working, used native vanilla window.location as above. TODO: Refactor redirect method\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('error:', err);\r\n        });\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.callAPI();\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n              <h1 className=\"App-title\">Teamwork app</h1>\r\n              <div className = 'share-screen'><br/><br/>\r\n                <p>Teamwork is an app that enables employees to interact while having fun.</p>\r\n                <p>Just log in to your account or create one to enjoy all the latest shares by your colleagues or post your own.</p>\r\n              </div>\r\n              <div className = 'share-screen'>\r\n                <form className = \"login-form\" onSubmit={this.handleSubmit}>\r\n                  <input type = \"text\" className = \"inputfield login-input\" placeholder = \"Email\" name = \"email\" value={this.state.email} onChange={this.handleEmailChange}/>\r\n                  <input type = \"password\" className = \"inputfield login-input\" placeholder = \"Password\" name = \"password\" value={this.state.password} onChange={this.handlePasswordChange}/>\r\n                  <button className = \"submit-btn\">Log In</button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport '../css/feed.css';\r\n\r\n\r\nclass Feed extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          email: '',\r\n          password: '',\r\n          redirect: false\r\n        };\r\n      this.handleEmailChange = this.handleEmailChange.bind(this);\r\n      this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleEmailChange (event) {\r\n        this.setState({email: event.target.value});\r\n    }\r\n\r\n    handlePasswordChange (event) {\r\n        this.setState({password: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n      fetch('http://localhost:4000/api/v1/feed', {\r\n        method: \"GET\",\r\n        // body : JSON.stringify({ email: this.state.email, password: this.state.password }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Accept\": \"application/json\"\r\n        },\r\n        credentials: 'include'\r\n      })\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          console.log('response:' ,response);\r\n          console.log(response.status);\r\n          \r\n          if(response.status === 'success') this.setState({redirect: true});\r\n\r\n          if(this.state.redirect) {\r\n            window.location = '/feed';\r\n            return  <Redirect  to ='/feed' /> // this method not working, used native vanilla window.location as above. TODO: Refactor redirect method\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('error:', err);\r\n        });\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.callAPI();\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n              <h1 className=\"App-title\">Welcome</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feed;","import React, { Component } from \"react\";\n\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './pages/home';\n\nimport Login from './pages/login';\n\nimport Feed from './pages/feed';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/login' component={Login}/>\n          <Route path='/feed' component={Feed}/>\n        </Switch>\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}